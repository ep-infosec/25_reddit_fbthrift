From: Neil Williams <neil@reddit.com>
Date: Mon, 2 Nov 2015 13:24:09 -0800
Subject: Add event for handler completion.

This is needed for finishing batches etc. when oneway methods are
executed.
---
 thrift/lib/py/Thrift.py          | 3 +++
 thrift/lib/py/util/Decorators.py | 2 ++
 2 files changed, 5 insertions(+)

diff --git a/thrift/lib/py/Thrift.py b/thrift/lib/py/Thrift.py
index ff213ed..494c0fe 100644
--- a/thrift/lib/py/Thrift.py
+++ b/thrift/lib/py/Thrift.py
@@ -67,6 +67,9 @@ class TProcessorEventHandler:
         """Called after the handler method's argument are read"""
         pass
 
+    def handlerDone(self, handler_context, fn_name, args):
+        """Called after the handler's method has executed"""
+
     def preWrite(self, handler_context, fn_name, result):
         """Called before the handler method's results are written"""
         pass
diff --git a/thrift/lib/py/util/Decorators.py b/thrift/lib/py/util/Decorators.py
index 7299c8f..d9d71c4 100644
--- a/thrift/lib/py/util/Decorators.py
+++ b/thrift/lib/py/util/Decorators.py
@@ -74,10 +74,12 @@ def process_method(argtype, oneway=False, twisted=False):
                 return func(self, args, handler_ctx, seqid, oprot)
             elif oneway is True:
                 func(self, args, handler_ctx)
+                self._event_handler.handlerDone(handler_ctx, fn_name, args)
             else:
                 result = func(self, args, handler_ctx)
                 if isinstance(result, TApplicationException):
                     reply_type = TMessageType.EXCEPTION
+                self._event_handler.handlerDone(handler_ctx, fn_name, args)
 
                 self._event_handler.preWrite(handler_ctx, fn_name, result)
                 oprot.writeMessageBegin(fn_name, reply_type, seqid)
